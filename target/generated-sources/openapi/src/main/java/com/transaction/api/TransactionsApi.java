/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.transaction.api;

import com.transaction.model.BadRequestErrorResponse;
import com.transaction.model.CreateTransactionRequest;
import com.transaction.model.NotFoundErrorResponse;
import com.transaction.model.TransactionDto;
import com.transaction.model.UpdateTransactionRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-04T08:33:28.256333+01:00[Europe/Warsaw]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "transactions", description = "the transactions API")
public interface TransactionsApi {

    /**
     * POST /transactions : Create transaction
     * Creates a new transaction.
     *
     * @param createTransactionRequest  (required)
     * @return Transaction created successfully (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "createTransaction",
        summary = "Create transaction",
        description = "Creates a new transaction.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Long> createTransaction(
        @Parameter(name = "CreateTransactionRequest", description = "", required = true) @Valid @RequestBody CreateTransactionRequest createTransactionRequest
    ) throws Exception;


    /**
     * DELETE /transactions/{id} : Delete transaction
     * Deletes a transaction with the specified ID.
     *
     * @param id  (required)
     * @return Transaction deleted successfully (status code 204)
     *         or Transaction not found (status code 404)
     */
    @Operation(
        operationId = "deleteTransaction",
        summary = "Delete transaction",
        description = "Deletes a transaction with the specified ID.",
        responses = {
            @ApiResponse(responseCode = "204", description = "Transaction deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Transaction not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/transactions/{id}"
    )
    
    ResponseEntity<Void> deleteTransaction(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception;


    /**
     * GET /transactions/{id} : Retrieve a transaction
     * Retrieves a transaction with specified ID.
     *
     * @param id  (required)
     * @return Transaction details (status code 200)
     *         or Argument mismatch (status code 400)
     *         or Transaction not found (status code 404)
     */
    @Operation(
        operationId = "getTransaction",
        summary = "Retrieve a transaction",
        description = "Retrieves a transaction with specified ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Argument mismatch", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Transaction not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<TransactionDto> getTransaction(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) throws Exception;


    /**
     * GET /transactions : Retrieve all transactions
     * Retrieves a list of all transactions.
     *
     * @return List of transactions (status code 200)
     */
    @Operation(
        operationId = "getTransactions",
        summary = "Retrieve all transactions",
        description = "Retrieves a list of all transactions.",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of transactions", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TransactionDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<TransactionDto>> getTransactions(
        
    ) throws Exception;


    /**
     * PUT /transactions/{id} : Update transaction
     * Updates an existing transaction.
     *
     * @param id  (required)
     * @param updateTransactionRequest  (optional)
     * @return Transaction updated successfully (status code 204)
     *         or Argument mismatch (status code 400)
     *         or Transaction not found (status code 404)
     */
    @Operation(
        operationId = "updateTransaction",
        summary = "Update transaction",
        description = "Updates an existing transaction.",
        responses = {
            @ApiResponse(responseCode = "204", description = "Transaction updated successfully"),
            @ApiResponse(responseCode = "400", description = "Argument mismatch", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Transaction not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/transactions/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateTransaction(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UpdateTransactionRequest", description = "") @Valid @RequestBody(required = false) UpdateTransactionRequest updateTransactionRequest
    ) throws Exception;

}
